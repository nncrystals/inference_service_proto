# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import inference_service_pb2 as inference__service__pb2


class InferenceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Inference = channel.unary_unary(
        '/Inference/Inference',
        request_serializer=inference__service__pb2.ImageBatchRequest.SerializeToString,
        response_deserializer=inference__service__pb2.InferenceResult.FromString,
        )


class InferenceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Inference(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InferenceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Inference': grpc.unary_unary_rpc_method_handler(
          servicer.Inference,
          request_deserializer=inference__service__pb2.ImageBatchRequest.FromString,
          response_serializer=inference__service__pb2.InferenceResult.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Inference', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
